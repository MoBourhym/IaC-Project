name: "Build and Deploy Dockerized App to EC2"

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create or Update Version in .env
        id: version
        run: |
          # Check if .env file exists, create if it doesn't
          if [ ! -f ".env" ]; then
            echo "Creating .env file with initial version"
            echo "APP_VERSION=v 1.0" > .env
            echo "PORT=3000" >> .env
            VERSION="1.0"
            NEW_VERSION="1.1"
          else
            # Read version from existing .env file
            VERSION=$(grep "APP_VERSION" .env | awk -F"=" '{print $2}' | sed 's/v //')
            if [ -z "$VERSION" ]; then
              # If APP_VERSION not found in .env, add it
              echo "APP_VERSION=v 1.0" >> .env
              VERSION="1.0"
              NEW_VERSION="1.1"
            else
              # Increment version
              NEW_VERSION=$(echo $VERSION | awk -F'.' '{print $1"."($2+1)}')
              sed -i "s/APP_VERSION=v $VERSION/APP_VERSION=v $NEW_VERSION/" .env
            fi
          fi
          
          echo "NEW_VERSION=v $NEW_VERSION" >> $GITHUB_ENV
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add .env
          git commit -m "Bump version to v $NEW_VERSION"
          git push

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./app
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/glsid-app:${{ env.NEW_VERSION }}

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            # Create an .env file on the EC2 instance with the correct version
            echo "APP_VERSION=v ${{ env.NEW_VERSION }}" > .env
            echo "PORT=3000" >> .env
            
            # Stop and remove any existing container
            sudo docker stop $(sudo docker ps -q --filter ancestor=${{ secrets.DOCKER_USERNAME }}/glsid-app) || true
            sudo docker rm $(sudo docker ps -a -q --filter ancestor=${{ secrets.DOCKER_USERNAME }}/glsid-app) || true
            
            # Pull and run the new container
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/glsid-app:${{ env.NEW_VERSION }}
            sudo docker run -d -p 3000:3000 \
              -e APP_VERSION="v ${{ env.NEW_VERSION }}" \
              -e PORT=3000 \
              ${{ secrets.DOCKER_USERNAME }}/glsid-app:${{ env.NEW_VERSION }}
          EOF
