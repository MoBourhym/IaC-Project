name: Build and Deploy Dockerized App to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Read and Increment Version
        id: version
        run: |
          VERSION=$(grep "const version" app/app.js | awk -F"'" '{print $2}' | sed 's/v //')
          NEW_VERSION=$(echo $VERSION | awk -F'.' '{print $1"."($2+1)}')
          sed -i "s/const version = 'v $VERSION'/const version = 'v $NEW_VERSION'/" app/app.js
          echo "NEW_VERSION=v $NEW_VERSION" >> $GITHUB_ENV
          # Set up git with token-based authentication
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          # Configure git to use the GITHUB_TOKEN for authentication
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          
          git add app/app.js
          git commit -m "Bump version to v $NEW_VERSION"
          git push

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/glsid-app:${{ env.NEW_VERSION }}

      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/your-key-pair.pem -o StrictHostKeyChecking=no ubuntu@<ec2-public-ip> << 'EOF'
            sudo docker stop $(sudo docker ps -q) || true
            sudo docker rm $(sudo docker ps -a -q) || true
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/glsid-app:${{ env.NEW_VERSION }}
            sudo docker run -d -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/glsid-app:${{ env.NEW_VERSION }}
          EOF
        env:
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}